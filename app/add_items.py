from flask import render_template, redirect, url_for, flash, request
from flask_login import current_user
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField, IntegerField, SelectField
from wtforms.validators import ValidationError, DataRequired, EqualTo, InputRequired, NumberRange, Length
from flask_babel import _, lazy_gettext as _l

from .models.base_model import User, Add_Product



from flask import Blueprint
bp = Blueprint('add_items', __name__)



class AddProductForm(FlaskForm):
   #id is generated by us, and the seller_id is current user id 
    product_name = StringField(_l('Product Name'), validators=[DataRequired()])
    describe = StringField(_l('Product Description'), validators=[DataRequired()])
    image_url = StringField(_l('Image URL'), validators=[DataRequired()])
    price = IntegerField(_l('Price'), validators=[DataRequired(), NumberRange(min=0.01, message="Invalid range")])
    quantity = IntegerField(_l('Quantity'), validators=[DataRequired(), NumberRange(min=1, message="Invalid range")])
    available = StringField(_l('Available'), validators=[DataRequired(), Length(min = 1, max = 1, message = "Ensure Y or N")])
    category = SelectField(_l('Pick a Category'), validators=[DataRequired()], choices=[('Automotive & Powersports', 'Automotive & Powersports'),
                            ('Baby Products', 'Baby Products'),
                            ('Books', 'Books'),
                            ('Camera & Photo', 'Camera & Photo'),
                            ('Cell Phones & Accessories', 'Cell Phones & Accessories'),
                            ('Clothing', 'Clothing'),
                            ('Consumer Electronics', 'Consumer Electronics'),
                            ('Entertainment Collectibles', 'Entertainment Collectibles'),
                            ('Fine Art', 'Fine Art'),
                            ('Grocery & Gourmet Foods', 'Grocery & Gourmet Foods'),
                            ('Health & Personal Care', 'Health & Personal Care'),
                            ('Home & Garden', 'Home & Garden'),
                            ('Independent Design', 'Independent Design'),
                            ('Industrial & Scientific', 'Industrial & Scientific'),
                            ('Major Appliances', 'Major Appliances'),
                            ('Misc', 'Misc'),
                            ('Music and DVD', 'Music and DVD'),
                            ('Musical Instruments', 'Musical Instruments'),
                            ('Office Products', 'Office Products'),
                            ('Outdoors', 'Outdoors'),
                            ('Personal Computers', 'Personal Computers'),
                            ('Pet Supplies', 'Pet Supplies'),
                            ('Software', 'Software'),
                            ('Sports', 'Sports'),
                            ('Sports Collectibles', 'Sports Collectibles'),
                            ('Tools & Home Improvement', 'Tools & Home Improvement'),
                            ('Toys & Games', 'Toys & Games'),
                            ('Video DVD & Blu-ray', 'Video DVD & Blu-ray'),
                            ('Video Games', 'Video Games'),
                            ('Watches', 'Watches')])
    submit = SubmitField(_l('Submit Product'))


@bp.route('/addItems', methods =['GET', 'POST'])
def add_items():
    if current_user.is_authenticated:
        sell_id = current_user.id
        #return redirect(url_for('seller_inventory.inventory'))
    else:
          flash('Please log in')
          sell_id = -1
    can_sell = User.can_sell(sell_id)

    form = AddProductForm()
    if form.validate_on_submit():
           
        name = request.form['product_name']
        
        description = request.form['describe']
      
        image_url = request.form['image_url']

        price = request.form['price']
    
        quantity = request.form['quantity']
  
        available = request.form['available']
      
        category = request.form['category']
        
        Add_Product.add_product(name,
                        description,
                        image_url,
                        price,
                        sell_id,
                        quantity,
                        available 
                        )
        Add_Product.add_category(category, 
                        name
                        )

        
        return redirect(url_for('seller_inventory.inventory'))
    return render_template('add_items.html', title='Add Items', form=form, poss_seller = can_sell)
    # print(Sellers.get_all_sellers())
    # get all available products for sale:

    #this is referencing the function in the model folder where we're getting all the possible products
    #models are for writing sql queries, have the inits so that you can do like product.id or just use to x.y to get the specific parameter of a table



    # find the products current user has bought:
    
    
    # render the page by adding information to the index.html file
   
                           #avail products is parameter name that will be passed to html, product has the actual data


