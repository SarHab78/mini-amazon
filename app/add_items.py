from flask import render_template, redirect, url_for, flash, request
from flask_login import current_user
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField, IntegerField
from wtforms.validators import ValidationError, DataRequired, Email, EqualTo
from flask_babel import _, lazy_gettext as _l

from .models.base_model import User
from .models.base_model import Product
from .models.base_model import Add_Product

from flask import Blueprint
bp = Blueprint('add_items', __name__)

class AddProductForm(FlaskForm):
   #id is generated by us, and the seller_id is current user id 
    product_name = StringField(_l('Product Name'), validators=[DataRequired()])
    describe = StringField(_l('Product Description'), validators=[DataRequired()])
    image_url = StringField(_l('Image URL'), validators=[DataRequired()])
    price = IntegerField(_l('Price'), validators=[DataRequired()])
    quantity = IntegerField(_l('Quantity'), validators=[DataRequired()])
    available = StringField(_l('Available'), validators=[DataRequired()])
    submit = SubmitField(_l('Submit Product'))


    #write a function to see if the product already exists
    def validate_product(self, product_name):
        if Product.product_exists(product_name, current_user.id):
            raise ValidationError(_('Already a product with this name. Update its quantity instead'))


@bp.route('/addItems', methods =['GET', 'POST'])
def add_items():
    if current_user.is_authenticated:
        sell_id = current_user.id
        #return redirect(url_for('seller_inventory.inventory'))
    else:
          flash('Please log in')
          sell_id = -1
    can_sell = User.can_sell(sell_id)

    form = AddProductForm()
    if(current_user.is_authenticated):
        if form.validate_product(form.product_name.data):
            if Add_Product.add_product(form.product_name.data,
                            form.describe.data,
                            form.image_url.data,
                            form.price.data,
                            sell_id,
                            form.quantity.data,
                            form.available.data):
                flash('Thank you for adding this product')
                return redirect(url_for('seller_inventory.inventory'))
    return render_template('add_items.html', title='Add Items', form=form, poss_seller = can_sell)
    # print(Sellers.get_all_sellers())
    # get all available products for sale:

    #this is referencing the function in the model folder where we're getting all the possible products
    #models are for writing sql queries, have the inits so that you can do like product.id or just use to x.y to get the specific parameter of a table



    # find the products current user has bought:
    
    
    # render the page by adding information to the index.html file
   
                           #avail products is parameter name that will be passed to html, product has the actual data


